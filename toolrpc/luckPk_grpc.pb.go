// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: toolrpc/luckPk.proto

package toolrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LuckPkApiClient is the client API for LuckPkApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LuckPkApiClient interface {
	CreateSpay(ctx context.Context, in *Spay, opts ...grpc.CallOption) (*Spay, error)
	HeartBeat(ctx context.Context, opts ...grpc.CallOption) (LuckPkApi_HeartBeatClient, error)
	RegistTlsKey(ctx context.Context, in *RegistTlsKeyReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//server will set LuckPk.invoice,and return to user.
	CreateLuckPk(ctx context.Context, in *LuckPk, opts ...grpc.CallOption) (*LuckPk, error)
	GetLuckPkInfo(ctx context.Context, in *LuckpkIdObj, opts ...grpc.CallOption) (*LuckPk, error)
	//pay user invoice
	GiveLuckPk(ctx context.Context, in *GiveLuckPkReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListLuckItem(ctx context.Context, in *LuckpkIdObj, opts ...grpc.CallOption) (*ListLuckItemRes, error)
	ListLuckPk(ctx context.Context, in *ListLuckPkReq, opts ...grpc.CallOption) (*ListLuckPkRes, error)
}

type luckPkApiClient struct {
	cc grpc.ClientConnInterface
}

func NewLuckPkApiClient(cc grpc.ClientConnInterface) LuckPkApiClient {
	return &luckPkApiClient{cc}
}

func (c *luckPkApiClient) CreateSpay(ctx context.Context, in *Spay, opts ...grpc.CallOption) (*Spay, error) {
	out := new(Spay)
	err := c.cc.Invoke(ctx, "/toolrpc.luckPkApi/CreateSpay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luckPkApiClient) HeartBeat(ctx context.Context, opts ...grpc.CallOption) (LuckPkApi_HeartBeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &LuckPkApi_ServiceDesc.Streams[0], "/toolrpc.luckPkApi/HeartBeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &luckPkApiHeartBeatClient{stream}
	return x, nil
}

type LuckPkApi_HeartBeatClient interface {
	Send(*HeartBeatMsg) error
	Recv() (*HeartBeatMsg, error)
	grpc.ClientStream
}

type luckPkApiHeartBeatClient struct {
	grpc.ClientStream
}

func (x *luckPkApiHeartBeatClient) Send(m *HeartBeatMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *luckPkApiHeartBeatClient) Recv() (*HeartBeatMsg, error) {
	m := new(HeartBeatMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *luckPkApiClient) RegistTlsKey(ctx context.Context, in *RegistTlsKeyReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/toolrpc.luckPkApi/RegistTlsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luckPkApiClient) CreateLuckPk(ctx context.Context, in *LuckPk, opts ...grpc.CallOption) (*LuckPk, error) {
	out := new(LuckPk)
	err := c.cc.Invoke(ctx, "/toolrpc.luckPkApi/CreateLuckPk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luckPkApiClient) GetLuckPkInfo(ctx context.Context, in *LuckpkIdObj, opts ...grpc.CallOption) (*LuckPk, error) {
	out := new(LuckPk)
	err := c.cc.Invoke(ctx, "/toolrpc.luckPkApi/GetLuckPkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luckPkApiClient) GiveLuckPk(ctx context.Context, in *GiveLuckPkReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/toolrpc.luckPkApi/GiveLuckPk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luckPkApiClient) ListLuckItem(ctx context.Context, in *LuckpkIdObj, opts ...grpc.CallOption) (*ListLuckItemRes, error) {
	out := new(ListLuckItemRes)
	err := c.cc.Invoke(ctx, "/toolrpc.luckPkApi/ListLuckItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luckPkApiClient) ListLuckPk(ctx context.Context, in *ListLuckPkReq, opts ...grpc.CallOption) (*ListLuckPkRes, error) {
	out := new(ListLuckPkRes)
	err := c.cc.Invoke(ctx, "/toolrpc.luckPkApi/ListLuckPk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LuckPkApiServer is the server API for LuckPkApi service.
// All implementations must embed UnimplementedLuckPkApiServer
// for forward compatibility
type LuckPkApiServer interface {
	CreateSpay(context.Context, *Spay) (*Spay, error)
	HeartBeat(LuckPkApi_HeartBeatServer) error
	RegistTlsKey(context.Context, *RegistTlsKeyReq) (*emptypb.Empty, error)
	//server will set LuckPk.invoice,and return to user.
	CreateLuckPk(context.Context, *LuckPk) (*LuckPk, error)
	GetLuckPkInfo(context.Context, *LuckpkIdObj) (*LuckPk, error)
	//pay user invoice
	GiveLuckPk(context.Context, *GiveLuckPkReq) (*emptypb.Empty, error)
	ListLuckItem(context.Context, *LuckpkIdObj) (*ListLuckItemRes, error)
	ListLuckPk(context.Context, *ListLuckPkReq) (*ListLuckPkRes, error)
	mustEmbedUnimplementedLuckPkApiServer()
}

// UnimplementedLuckPkApiServer must be embedded to have forward compatible implementations.
type UnimplementedLuckPkApiServer struct {
}

func (UnimplementedLuckPkApiServer) CreateSpay(context.Context, *Spay) (*Spay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpay not implemented")
}
func (UnimplementedLuckPkApiServer) HeartBeat(LuckPkApi_HeartBeatServer) error {
	return status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedLuckPkApiServer) RegistTlsKey(context.Context, *RegistTlsKeyReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistTlsKey not implemented")
}
func (UnimplementedLuckPkApiServer) CreateLuckPk(context.Context, *LuckPk) (*LuckPk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLuckPk not implemented")
}
func (UnimplementedLuckPkApiServer) GetLuckPkInfo(context.Context, *LuckpkIdObj) (*LuckPk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLuckPkInfo not implemented")
}
func (UnimplementedLuckPkApiServer) GiveLuckPk(context.Context, *GiveLuckPkReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveLuckPk not implemented")
}
func (UnimplementedLuckPkApiServer) ListLuckItem(context.Context, *LuckpkIdObj) (*ListLuckItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLuckItem not implemented")
}
func (UnimplementedLuckPkApiServer) ListLuckPk(context.Context, *ListLuckPkReq) (*ListLuckPkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLuckPk not implemented")
}
func (UnimplementedLuckPkApiServer) mustEmbedUnimplementedLuckPkApiServer() {}

// UnsafeLuckPkApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LuckPkApiServer will
// result in compilation errors.
type UnsafeLuckPkApiServer interface {
	mustEmbedUnimplementedLuckPkApiServer()
}

func RegisterLuckPkApiServer(s grpc.ServiceRegistrar, srv LuckPkApiServer) {
	s.RegisterService(&LuckPkApi_ServiceDesc, srv)
}

func _LuckPkApi_CreateSpay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Spay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuckPkApiServer).CreateSpay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolrpc.luckPkApi/CreateSpay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuckPkApiServer).CreateSpay(ctx, req.(*Spay))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuckPkApi_HeartBeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LuckPkApiServer).HeartBeat(&luckPkApiHeartBeatServer{stream})
}

type LuckPkApi_HeartBeatServer interface {
	Send(*HeartBeatMsg) error
	Recv() (*HeartBeatMsg, error)
	grpc.ServerStream
}

type luckPkApiHeartBeatServer struct {
	grpc.ServerStream
}

func (x *luckPkApiHeartBeatServer) Send(m *HeartBeatMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *luckPkApiHeartBeatServer) Recv() (*HeartBeatMsg, error) {
	m := new(HeartBeatMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LuckPkApi_RegistTlsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistTlsKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuckPkApiServer).RegistTlsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolrpc.luckPkApi/RegistTlsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuckPkApiServer).RegistTlsKey(ctx, req.(*RegistTlsKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuckPkApi_CreateLuckPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LuckPk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuckPkApiServer).CreateLuckPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolrpc.luckPkApi/CreateLuckPk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuckPkApiServer).CreateLuckPk(ctx, req.(*LuckPk))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuckPkApi_GetLuckPkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LuckpkIdObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuckPkApiServer).GetLuckPkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolrpc.luckPkApi/GetLuckPkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuckPkApiServer).GetLuckPkInfo(ctx, req.(*LuckpkIdObj))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuckPkApi_GiveLuckPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveLuckPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuckPkApiServer).GiveLuckPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolrpc.luckPkApi/GiveLuckPk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuckPkApiServer).GiveLuckPk(ctx, req.(*GiveLuckPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuckPkApi_ListLuckItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LuckpkIdObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuckPkApiServer).ListLuckItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolrpc.luckPkApi/ListLuckItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuckPkApiServer).ListLuckItem(ctx, req.(*LuckpkIdObj))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuckPkApi_ListLuckPk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLuckPkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuckPkApiServer).ListLuckPk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolrpc.luckPkApi/ListLuckPk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuckPkApiServer).ListLuckPk(ctx, req.(*ListLuckPkReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LuckPkApi_ServiceDesc is the grpc.ServiceDesc for LuckPkApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LuckPkApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "toolrpc.luckPkApi",
	HandlerType: (*LuckPkApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpay",
			Handler:    _LuckPkApi_CreateSpay_Handler,
		},
		{
			MethodName: "RegistTlsKey",
			Handler:    _LuckPkApi_RegistTlsKey_Handler,
		},
		{
			MethodName: "CreateLuckPk",
			Handler:    _LuckPkApi_CreateLuckPk_Handler,
		},
		{
			MethodName: "GetLuckPkInfo",
			Handler:    _LuckPkApi_GetLuckPkInfo_Handler,
		},
		{
			MethodName: "GiveLuckPk",
			Handler:    _LuckPkApi_GiveLuckPk_Handler,
		},
		{
			MethodName: "ListLuckItem",
			Handler:    _LuckPkApi_ListLuckItem_Handler,
		},
		{
			MethodName: "ListLuckPk",
			Handler:    _LuckPkApi_ListLuckPk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HeartBeat",
			Handler:       _LuckPkApi_HeartBeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "toolrpc/luckPk.proto",
}
