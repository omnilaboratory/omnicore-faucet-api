// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: toolrpc/proto.proto

package toolrpc

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OmniGetbalanceReq defines the OmniGetbalance JSON-RPC command.
type OmniGetbalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PropertyId int64  `protobuf:"varint,2,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
}

func (x *OmniGetbalanceReq) Reset() {
	*x = OmniGetbalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_proto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniGetbalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniGetbalanceReq) ProtoMessage() {}

func (x *OmniGetbalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_proto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniGetbalanceReq.ProtoReflect.Descriptor instead.
func (*OmniGetbalanceReq) Descriptor() ([]byte, []int) {
	return file_toolrpc_proto_proto_rawDescGZIP(), []int{0}
}

func (x *OmniGetbalanceReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OmniGetbalanceReq) GetPropertyId() int64 {
	if x != nil {
		return x.PropertyId
	}
	return 0
}

// OmniGetPropertyRes models the data from the Omni-Getbalance command.
type OmniGetbalanceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance  string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Reserved string `protobuf:"bytes,2,opt,name=reserved,proto3" json:"reserved,omitempty"`
	Frozen   string `protobuf:"bytes,3,opt,name=frozen,proto3" json:"frozen,omitempty"`
}

func (x *OmniGetbalanceRes) Reset() {
	*x = OmniGetbalanceRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_proto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniGetbalanceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniGetbalanceRes) ProtoMessage() {}

func (x *OmniGetbalanceRes) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_proto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniGetbalanceRes.ProtoReflect.Descriptor instead.
func (*OmniGetbalanceRes) Descriptor() ([]byte, []int) {
	return file_toolrpc_proto_proto_rawDescGZIP(), []int{1}
}

func (x *OmniGetbalanceRes) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *OmniGetbalanceRes) GetReserved() string {
	if x != nil {
		return x.Reserved
	}
	return ""
}

func (x *OmniGetbalanceRes) GetFrozen() string {
	if x != nil {
		return x.Frozen
	}
	return ""
}

// OmniGetPropertyReq defines the omniGetProperty JSON-RPC command.
type OmniGetPropertyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyId int64 `protobuf:"varint,1,opt,name=property_id,json=propertyId,proto3" json:"property_id,omitempty"`
}

func (x *OmniGetPropertyReq) Reset() {
	*x = OmniGetPropertyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_proto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniGetPropertyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniGetPropertyReq) ProtoMessage() {}

func (x *OmniGetPropertyReq) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_proto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniGetPropertyReq.ProtoReflect.Descriptor instead.
func (*OmniGetPropertyReq) Descriptor() ([]byte, []int) {
	return file_toolrpc_proto_proto_rawDescGZIP(), []int{2}
}

func (x *OmniGetPropertyReq) GetPropertyId() int64 {
	if x != nil {
		return x.PropertyId
	}
	return 0
}

// OmniGetPropertyRes models the data from the Omni-Getbalance command.
type OmniGetPropertyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Propertyid      int64  `protobuf:"varint,1,opt,name=propertyid,proto3" json:"propertyid,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Category        string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Subcategory     string `protobuf:"bytes,4,opt,name=subcategory,proto3" json:"subcategory,omitempty"`
	Data            string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Url             string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Divisible       bool   `protobuf:"varint,7,opt,name=divisible,proto3" json:"divisible,omitempty"`
	Issuer          string `protobuf:"bytes,8,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Creationtxid    string `protobuf:"bytes,9,opt,name=creationtxid,proto3" json:"creationtxid,omitempty"`
	Fixedissuance   bool   `protobuf:"varint,10,opt,name=fixedissuance,proto3" json:"fixedissuance,omitempty"`
	Managedissuance bool   `protobuf:"varint,11,opt,name=managedissuance,proto3" json:"managedissuance,omitempty"`
	Totaltokens     string `protobuf:"bytes,12,opt,name=totaltokens,proto3" json:"totaltokens,omitempty"`
}

func (x *OmniGetPropertyRes) Reset() {
	*x = OmniGetPropertyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_proto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniGetPropertyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniGetPropertyRes) ProtoMessage() {}

func (x *OmniGetPropertyRes) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_proto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniGetPropertyRes.ProtoReflect.Descriptor instead.
func (*OmniGetPropertyRes) Descriptor() ([]byte, []int) {
	return file_toolrpc_proto_proto_rawDescGZIP(), []int{3}
}

func (x *OmniGetPropertyRes) GetPropertyid() int64 {
	if x != nil {
		return x.Propertyid
	}
	return 0
}

func (x *OmniGetPropertyRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OmniGetPropertyRes) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *OmniGetPropertyRes) GetSubcategory() string {
	if x != nil {
		return x.Subcategory
	}
	return ""
}

func (x *OmniGetPropertyRes) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *OmniGetPropertyRes) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *OmniGetPropertyRes) GetDivisible() bool {
	if x != nil {
		return x.Divisible
	}
	return false
}

func (x *OmniGetPropertyRes) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *OmniGetPropertyRes) GetCreationtxid() string {
	if x != nil {
		return x.Creationtxid
	}
	return ""
}

func (x *OmniGetPropertyRes) GetFixedissuance() bool {
	if x != nil {
		return x.Fixedissuance
	}
	return false
}

func (x *OmniGetPropertyRes) GetManagedissuance() bool {
	if x != nil {
		return x.Managedissuance
	}
	return false
}

func (x *OmniGetPropertyRes) GetTotaltokens() string {
	if x != nil {
		return x.Totaltokens
	}
	return ""
}

// OmniGetPropertyReq defines the omniGetProperty JSON-RPC command.
type OmniSendCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AssetId string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *OmniSendCoinReq) Reset() {
	*x = OmniSendCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_proto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniSendCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniSendCoinReq) ProtoMessage() {}

func (x *OmniSendCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_proto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniSendCoinReq.ProtoReflect.Descriptor instead.
func (*OmniSendCoinReq) Descriptor() ([]byte, []int) {
	return file_toolrpc_proto_proto_rawDescGZIP(), []int{4}
}

func (x *OmniSendCoinReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OmniSendCoinReq) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type OmniSendCoinRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *OmniSendCoinRes) Reset() {
	*x = OmniSendCoinRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_proto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniSendCoinRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniSendCoinRes) ProtoMessage() {}

func (x *OmniSendCoinRes) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_proto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniSendCoinRes.ProtoReflect.Descriptor instead.
func (*OmniSendCoinRes) Descriptor() ([]byte, []int) {
	return file_toolrpc_proto_proto_rawDescGZIP(), []int{5}
}

func (x *OmniSendCoinRes) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type OmniMineCoinRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *OmniMineCoinRes) Reset() {
	*x = OmniMineCoinRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_proto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OmniMineCoinRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OmniMineCoinRes) ProtoMessage() {}

func (x *OmniMineCoinRes) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_proto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OmniMineCoinRes.ProtoReflect.Descriptor instead.
func (*OmniMineCoinRes) Descriptor() ([]byte, []int) {
	return file_toolrpc_proto_proto_rawDescGZIP(), []int{6}
}

func (x *OmniMineCoinRes) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type CreatePropertyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//the address to send from
	Fromaddress string `protobuf:"bytes,1,opt,name=fromaddress,proto3" json:"fromaddress,omitempty"`
	//a description for the new tokens (can be "")
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//the number of tokens to create
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CreatePropertyReq) Reset() {
	*x = CreatePropertyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_proto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertyReq) ProtoMessage() {}

func (x *CreatePropertyReq) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_proto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertyReq.ProtoReflect.Descriptor instead.
func (*CreatePropertyReq) Descriptor() ([]byte, []int) {
	return file_toolrpc_proto_proto_rawDescGZIP(), []int{7}
}

func (x *CreatePropertyReq) GetFromaddress() string {
	if x != nil {
		return x.Fromaddress
	}
	return ""
}

func (x *CreatePropertyReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePropertyReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type CreatePropertyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *CreatePropertyRes) Reset() {
	*x = CreatePropertyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_proto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropertyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropertyRes) ProtoMessage() {}

func (x *CreatePropertyRes) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_proto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropertyRes.ProtoReflect.Descriptor instead.
func (*CreatePropertyRes) Descriptor() ([]byte, []int) {
	return file_toolrpc_proto_proto_rawDescGZIP(), []int{8}
}

func (x *CreatePropertyRes) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type ListPropertiesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Property `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListPropertiesRes) Reset() {
	*x = ListPropertiesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_proto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPropertiesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPropertiesRes) ProtoMessage() {}

func (x *ListPropertiesRes) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_proto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPropertiesRes.ProtoReflect.Descriptor instead.
func (*ListPropertiesRes) Descriptor() ([]byte, []int) {
	return file_toolrpc_proto_proto_rawDescGZIP(), []int{9}
}

func (x *ListPropertiesRes) GetItems() []*Property {
	if x != nil {
		return x.Items
	}
	return nil
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category         string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Creationtxid     string `protobuf:"bytes,2,opt,name=creationtxid,proto3" json:"creationtxid,omitempty"`
	Data             string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Delegate         string `protobuf:"bytes,4,opt,name=delegate,proto3" json:"delegate,omitempty"`
	Divisible        bool   `protobuf:"varint,5,opt,name=divisible,proto3" json:"divisible,omitempty"`
	Fixedissuance    bool   `protobuf:"varint,6,opt,name=fixedissuance,proto3" json:"fixedissuance,omitempty"`
	Issuer           string `protobuf:"bytes,7,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Managedissuance  bool   `protobuf:"varint,8,opt,name=managedissuance,proto3" json:"managedissuance,omitempty"`
	Name             string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	NonFungibletoken bool   `protobuf:"varint,10,opt,name=non_fungibletoken,json=nonFungibletoken,proto3" json:"non_fungibletoken,omitempty"`
	Propertyid       int64  `protobuf:"varint,11,opt,name=propertyid,proto3" json:"propertyid,omitempty"`
	Subcategory      string `protobuf:"bytes,12,opt,name=subcategory,proto3" json:"subcategory,omitempty"`
	Url              string `protobuf:"bytes,13,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_proto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_proto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_toolrpc_proto_proto_rawDescGZIP(), []int{10}
}

func (x *Property) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Property) GetCreationtxid() string {
	if x != nil {
		return x.Creationtxid
	}
	return ""
}

func (x *Property) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Property) GetDelegate() string {
	if x != nil {
		return x.Delegate
	}
	return ""
}

func (x *Property) GetDivisible() bool {
	if x != nil {
		return x.Divisible
	}
	return false
}

func (x *Property) GetFixedissuance() bool {
	if x != nil {
		return x.Fixedissuance
	}
	return false
}

func (x *Property) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Property) GetManagedissuance() bool {
	if x != nil {
		return x.Managedissuance
	}
	return false
}

func (x *Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Property) GetNonFungibletoken() bool {
	if x != nil {
		return x.NonFungibletoken
	}
	return false
}

func (x *Property) GetPropertyid() int64 {
	if x != nil {
		return x.Propertyid
	}
	return 0
}

func (x *Property) GetSubcategory() string {
	if x != nil {
		return x.Subcategory
	}
	return ""
}

func (x *Property) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_toolrpc_proto_proto protoreflect.FileDescriptor

var file_toolrpc_proto_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x11, 0x4f, 0x6d, 0x6e,
	0x69, 0x47, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x41,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0x92, 0x41, 0x24, 0x3a, 0x22, 0x6d, 0x74, 0x6f, 0x77, 0x63, 0x65, 0x41, 0x77, 0x32, 0x79,
	0x65, 0x66, 0x74, 0x52, 0x31, 0x70, 0x50, 0x67, 0x31, 0x35, 0x51, 0x63, 0x73, 0x44, 0x71, 0x73,
	0x6e, 0x53, 0x69, 0x6b, 0x37, 0x53, 0x70, 0x7a, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x64, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x43, 0x92, 0x41, 0x3c, 0x32, 0x3a, 0x6d, 0x61, 0x69,
	0x6e, 0x6e, 0x65, 0x74, 0x20, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x34, 0x32, 0x30, 0x38, 0x3b,
	0x20, 0x74, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x20, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x35,
	0x31, 0x36, 0x30, 0x20, 0x3b, 0x72, 0x65, 0x67, 0x6e, 0x65, 0x74, 0x20, 0x32, 0x31, 0x34, 0x37,
	0x34, 0x38, 0x33, 0x36, 0x35, 0x31, 0x20, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x11, 0x4f, 0x6d, 0x6e, 0x69, 0x47,
	0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x4f,
	0x6d, 0x6e, 0x69, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x6a, 0x92, 0x41, 0x63, 0x32, 0x3a, 0x6d, 0x61,
	0x69, 0x6e, 0x6e, 0x65, 0x74, 0x20, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x34, 0x32, 0x30, 0x38,
	0x3b, 0x20, 0x74, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x20, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38,
	0x35, 0x31, 0x36, 0x30, 0x20, 0x3b, 0x72, 0x65, 0x67, 0x6e, 0x65, 0x74, 0x20, 0x32, 0x31, 0x34,
	0x37, 0x34, 0x38, 0x33, 0x36, 0x35, 0x31, 0x20, 0xf2, 0x02, 0x0a, 0x32, 0x31, 0x34, 0x37, 0x34,
	0x38, 0x34, 0x32, 0x30, 0x38, 0xf2, 0x02, 0x0a, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x35, 0x31,
	0x36, 0x30, 0xf2, 0x02, 0x0a, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x33, 0x36, 0x35, 0x31, 0xe2,
	0x41, 0x01, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x89, 0x03, 0x0a, 0x12, 0x4f, 0x6d, 0x6e, 0x69, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x3a,
	0x0a, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x33, 0x36, 0x35, 0x31, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x74, 0x78, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x78, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0f,
	0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x41, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0x92, 0x41, 0x24, 0x3a, 0x22, 0x6d, 0x7a, 0x50, 0x33, 0x47, 0x52, 0x58, 0x77, 0x6b,
	0x78, 0x46, 0x39, 0x47, 0x72, 0x66, 0x57, 0x42, 0x6a, 0x37, 0x35, 0x35, 0x4a, 0x50, 0x33, 0x44,
	0x6f, 0x69, 0x74, 0x77, 0x6a, 0x69, 0x52, 0x73, 0x36, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x5e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x92, 0x41, 0x3c, 0x32, 0x3a, 0x6d, 0x61, 0x69, 0x6e, 0x6e,
	0x65, 0x74, 0x20, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x34, 0x32, 0x30, 0x38, 0x3b, 0x20, 0x74,
	0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x20, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x35, 0x31, 0x36,
	0x30, 0x20, 0x3b, 0x72, 0x65, 0x67, 0x6e, 0x65, 0x74, 0x20, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38,
	0x33, 0x36, 0x35, 0x31, 0x20, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x29, 0x0a, 0x0f, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x29, 0x0a,
	0x0f, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x4b,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x4a, 0x24, 0x22, 0x6d, 0x74, 0x6f, 0x77, 0x63,
	0x65, 0x41, 0x77, 0x32, 0x79, 0x65, 0x66, 0x74, 0x52, 0x31, 0x70, 0x50, 0x67, 0x31, 0x35, 0x51,
	0x63, 0x73, 0x44, 0x71, 0x73, 0x6e, 0x53, 0x69, 0x6b, 0x37, 0x53, 0x70, 0x7a, 0x22, 0x52, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x4a, 0x0b,
	0x22, 0x74, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x22, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x3c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x97, 0x05, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x25, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x22, 0x74, 0x31, 0x22, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x6b, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x47, 0x92, 0x41,
	0x44, 0x4a, 0x42, 0x22, 0x62, 0x36, 0x38, 0x66, 0x39, 0x30, 0x33, 0x61, 0x62, 0x33, 0x36, 0x65,
	0x64, 0x30, 0x32, 0x33, 0x66, 0x30, 0x63, 0x36, 0x62, 0x37, 0x63, 0x33, 0x37, 0x30, 0x62, 0x39,
	0x32, 0x38, 0x31, 0x64, 0x38, 0x37, 0x35, 0x38, 0x64, 0x37, 0x62, 0x33, 0x63, 0x37, 0x38, 0x33,
	0x35, 0x65, 0x64, 0x61, 0x34, 0x61, 0x34, 0x33, 0x39, 0x30, 0x31, 0x38, 0x61, 0x36, 0x34, 0x66,
	0x63, 0x36, 0x64, 0x32, 0x22, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74,
	0x78, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02, 0x22, 0x22, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02, 0x22, 0x22, 0x52, 0x08, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22,
	0x74, 0x72, 0x75, 0x65, 0x22, 0x52, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x31, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x74,
	0x72, 0x75, 0x65, 0x22, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x69, 0x73, 0x73, 0x75, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x4a, 0x24, 0x22, 0x6d, 0x74, 0x6f, 0x77, 0x63,
	0x65, 0x41, 0x77, 0x32, 0x79, 0x65, 0x66, 0x74, 0x52, 0x31, 0x70, 0x50, 0x67, 0x31, 0x35, 0x51,
	0x63, 0x73, 0x44, 0x71, 0x73, 0x6e, 0x53, 0x69, 0x6b, 0x37, 0x53, 0x70, 0x7a, 0x22, 0x52, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0c, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x52, 0x0f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41,
	0x0a, 0x4a, 0x08, 0x22, 0x66, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x11, 0x6e, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0c, 0x92, 0x41,
	0x09, 0x4a, 0x07, 0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x46,
	0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0f, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x32, 0x31, 0x34, 0x37, 0x34, 0x38, 0x33, 0x36, 0x35,
	0x31, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0x92, 0x41, 0x04, 0x4a, 0x02, 0x22, 0x22, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x62, 0x61, 0x69,
	0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x32, 0x9b, 0x0a, 0x0a,
	0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x93, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e,
	0x4f, 0x6d, 0x6e, 0x69, 0x47, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6d, 0x6e, 0x69,
	0x47, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x22, 0xcc, 0x01,
	0x92, 0x41, 0xa7, 0x01, 0x0a, 0x03, 0x73, 0x74, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x3b, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x12, 0x60, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0xe4, 0xbb, 0xa5, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4f, 0x6d, 0x6e, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x73, 0x72, 0x63, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x6f, 0x63,
	0x2f, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64, 0x23, 0x6f, 0x6d, 0x6e, 0x69,
	0x5f, 0x67, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x12, 0x5f, 0x0a, 0x08,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6d, 0x6e,
	0x69, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x69, 0x6e, 0x2f, 0x7b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x12, 0x4b, 0x0a,
	0x04, 0x4d, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x4d, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12,
	0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x4d, 0x69, 0x6e, 0x65, 0x12, 0x96, 0x02, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1b, 0x2e, 0x74, 0x6f, 0x6f,
	0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x4f, 0x6d, 0x6e, 0x69, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x92, 0x41, 0xa4, 0x01, 0x0a, 0x03, 0x73, 0x74, 0x64,
	0x22, 0x9c, 0x01, 0x0a, 0x3b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2e,
	0x12, 0x5d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x6d, 0x6e, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x6f,
	0x6d, 0x6e, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x64, 0x6f, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64, 0x23,
	0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xb5, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0xee, 0x01, 0x92, 0x41, 0xd4,
	0x01, 0x0a, 0x03, 0x73, 0x74, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x20, 0x0a, 0x20, 0x54, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x20, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x67, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x2e, 0x12, 0x61, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x6d, 0x6e, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x64, 0x6f, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x64, 0x23, 0x6f, 0x6d, 0x6e, 0x69, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x12, 0xfc, 0x01, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1a,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x74, 0x6f, 0x6f,
	0x6c, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x92, 0x41, 0x94, 0x01, 0x0a, 0x03, 0x73,
	0x74, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6e, 0x65,
	0x77, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x12, 0x64, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4f, 0x6d, 0x6e, 0x69, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x73,
	0x72, 0x63, 0x2f, 0x6f, 0x6d, 0x6e, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x6f, 0x63, 0x2f,
	0x72, 0x70, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x64, 0x23, 0x6f, 0x6d, 0x6e, 0x69, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x15, 0x5a, 0x13, 0x6f, 0x6d,
	0x2d, 0x72, 0x70, 0x63, 0x2d, 0x74, 0x6f, 0x6f, 0x6c, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_toolrpc_proto_proto_rawDescOnce sync.Once
	file_toolrpc_proto_proto_rawDescData = file_toolrpc_proto_proto_rawDesc
)

func file_toolrpc_proto_proto_rawDescGZIP() []byte {
	file_toolrpc_proto_proto_rawDescOnce.Do(func() {
		file_toolrpc_proto_proto_rawDescData = protoimpl.X.CompressGZIP(file_toolrpc_proto_proto_rawDescData)
	})
	return file_toolrpc_proto_proto_rawDescData
}

var file_toolrpc_proto_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_toolrpc_proto_proto_goTypes = []interface{}{
	(*OmniGetbalanceReq)(nil),  // 0: toolrpc.OmniGetbalanceReq
	(*OmniGetbalanceRes)(nil),  // 1: toolrpc.OmniGetbalanceRes
	(*OmniGetPropertyReq)(nil), // 2: toolrpc.OmniGetPropertyReq
	(*OmniGetPropertyRes)(nil), // 3: toolrpc.OmniGetPropertyRes
	(*OmniSendCoinReq)(nil),    // 4: toolrpc.OmniSendCoinReq
	(*OmniSendCoinRes)(nil),    // 5: toolrpc.OmniSendCoinRes
	(*OmniMineCoinRes)(nil),    // 6: toolrpc.OmniMineCoinRes
	(*CreatePropertyReq)(nil),  // 7: toolrpc.CreatePropertyReq
	(*CreatePropertyRes)(nil),  // 8: toolrpc.CreatePropertyRes
	(*ListPropertiesRes)(nil),  // 9: toolrpc.ListPropertiesRes
	(*Property)(nil),           // 10: toolrpc.Property
	(*emptypb.Empty)(nil),      // 11: google.protobuf.Empty
}
var file_toolrpc_proto_proto_depIdxs = []int32{
	10, // 0: toolrpc.ListPropertiesRes.items:type_name -> toolrpc.Property
	0,  // 1: toolrpc.tools.GetBalance:input_type -> toolrpc.OmniGetbalanceReq
	4,  // 2: toolrpc.tools.SendCoin:input_type -> toolrpc.OmniSendCoinReq
	11, // 3: toolrpc.tools.Mine:input_type -> google.protobuf.Empty
	2,  // 4: toolrpc.tools.GetProperty:input_type -> toolrpc.OmniGetPropertyReq
	11, // 5: toolrpc.tools.ListProperties:input_type -> google.protobuf.Empty
	7,  // 6: toolrpc.tools.CreateProperty:input_type -> toolrpc.CreatePropertyReq
	1,  // 7: toolrpc.tools.GetBalance:output_type -> toolrpc.OmniGetbalanceRes
	5,  // 8: toolrpc.tools.SendCoin:output_type -> toolrpc.OmniSendCoinRes
	6,  // 9: toolrpc.tools.Mine:output_type -> toolrpc.OmniMineCoinRes
	3,  // 10: toolrpc.tools.GetProperty:output_type -> toolrpc.OmniGetPropertyRes
	9,  // 11: toolrpc.tools.ListProperties:output_type -> toolrpc.ListPropertiesRes
	8,  // 12: toolrpc.tools.CreateProperty:output_type -> toolrpc.CreatePropertyRes
	7,  // [7:13] is the sub-list for method output_type
	1,  // [1:7] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_toolrpc_proto_proto_init() }
func file_toolrpc_proto_proto_init() {
	if File_toolrpc_proto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_toolrpc_proto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmniGetbalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_proto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmniGetbalanceRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_proto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmniGetPropertyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_proto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmniGetPropertyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_proto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmniSendCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_proto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmniSendCoinRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_proto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OmniMineCoinRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_proto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_proto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropertyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_proto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPropertiesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_proto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_toolrpc_proto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_toolrpc_proto_proto_goTypes,
		DependencyIndexes: file_toolrpc_proto_proto_depIdxs,
		MessageInfos:      file_toolrpc_proto_proto_msgTypes,
	}.Build()
	File_toolrpc_proto_proto = out.File
	file_toolrpc_proto_proto_rawDesc = nil
	file_toolrpc_proto_proto_goTypes = nil
	file_toolrpc_proto_proto_depIdxs = nil
}
