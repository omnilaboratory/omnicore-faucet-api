// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: toolrpc/luckPk.proto

package toolrpc

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LuckPKStatus int32

const (
	LuckPKStatus_INIT LuckPKStatus = 0
	//use have pay the LuckPk
	LuckPKStatus_WorkIng LuckPKStatus = 1
	//all balance was consumered
	LuckPKStatus_End         LuckPKStatus = 2
	LuckPKStatus_Expired     LuckPKStatus = 3
	LuckPKStatus_ErrorCreate LuckPKStatus = 4
)

// Enum value maps for LuckPKStatus.
var (
	LuckPKStatus_name = map[int32]string{
		0: "INIT",
		1: "WorkIng",
		2: "End",
		3: "Expired",
		4: "ErrorCreate",
	}
	LuckPKStatus_value = map[string]int32{
		"INIT":        0,
		"WorkIng":     1,
		"End":         2,
		"Expired":     3,
		"ErrorCreate": 4,
	}
)

func (x LuckPKStatus) Enum() *LuckPKStatus {
	p := new(LuckPKStatus)
	*p = x
	return p
}

func (x LuckPKStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LuckPKStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_toolrpc_luckPk_proto_enumTypes[0].Descriptor()
}

func (LuckPKStatus) Type() protoreflect.EnumType {
	return &file_toolrpc_luckPk_proto_enumTypes[0]
}

func (x LuckPKStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LuckPKStatus.Descriptor instead.
func (LuckPKStatus) EnumDescriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{0}
}

type SpayStatus int32

const (
	SpayStatus_PayINIT SpayStatus = 0
	//user have payed service Invoice
	SpayStatus_UserPayed SpayStatus = 1
	//server have payed to user c
	SpayStatus_PayEnd SpayStatus = 2
	SpayStatus_Error  SpayStatus = 3
)

// Enum value maps for SpayStatus.
var (
	SpayStatus_name = map[int32]string{
		0: "PayINIT",
		1: "UserPayed",
		2: "PayEnd",
		3: "Error",
	}
	SpayStatus_value = map[string]int32{
		"PayINIT":   0,
		"UserPayed": 1,
		"PayEnd":    2,
		"Error":     3,
	}
)

func (x SpayStatus) Enum() *SpayStatus {
	p := new(SpayStatus)
	*p = x
	return p
}

func (x SpayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_toolrpc_luckPk_proto_enumTypes[1].Descriptor()
}

func (SpayStatus) Type() protoreflect.EnumType {
	return &file_toolrpc_luckPk_proto_enumTypes[1]
}

func (x SpayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpayStatus.Descriptor instead.
func (SpayStatus) EnumDescriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{1}
}

// spay:  substitution　pay
type Spay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//user a create invoice,give to b,
	UserInvoice string `protobuf:"bytes,2,opt,name=user_invoice,json=userInvoice,proto3" json:"user_invoice,omitempty"`
	// server b gen invoice, user a rcv it and give to c, user c will pay it
	ServInvoice string `protobuf:"bytes,3,opt,name=serv_invoice,json=servInvoice,proto3" json:"serv_invoice,omitempty"`
	//  server invoice hash
	SiPayHash string `protobuf:"bytes,4,opt,name=si_payHash,json=siPayHash,proto3" json:"si_payHash,omitempty"`
	//  user a id , fill in server side;
	UserId    int64      `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedAt int64      `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status    SpayStatus `protobuf:"varint,7,opt,name=status,proto3,enum=toolrpc.SpayStatus" json:"status,omitempty"`
	ErrMsg    string     `protobuf:"bytes,8,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	ErrTimes  int64      `protobuf:"varint,9,opt,name=errTimes,proto3" json:"errTimes,omitempty"`
}

func (x *Spay) Reset() {
	*x = Spay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_luckPk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spay) ProtoMessage() {}

func (x *Spay) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_luckPk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spay.ProtoReflect.Descriptor instead.
func (*Spay) Descriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{0}
}

func (x *Spay) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Spay) GetUserInvoice() string {
	if x != nil {
		return x.UserInvoice
	}
	return ""
}

func (x *Spay) GetServInvoice() string {
	if x != nil {
		return x.ServInvoice
	}
	return ""
}

func (x *Spay) GetSiPayHash() string {
	if x != nil {
		return x.SiPayHash
	}
	return ""
}

func (x *Spay) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Spay) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Spay) GetStatus() SpayStatus {
	if x != nil {
		return x.Status
	}
	return SpayStatus_PayINIT
}

func (x *Spay) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *Spay) GetErrTimes() int64 {
	if x != nil {
		return x.ErrTimes
	}
	return 0
}

//luckPackage
type LuckPk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserAlias string `protobuf:"bytes,3,opt,name=user_alias,json=userAlias,proto3" json:"user_alias,omitempty"`
	AssetId   uint64 `protobuf:"varint,4,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// precision　is 100000000
	Amt uint64 `protobuf:"varint,5,opt,name=amt,proto3" json:"amt,omitempty"`
	// precision　is 100000000
	Balance uint64 `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"`
	//fill on server side
	PaymentHash string `protobuf:"bytes,13,opt,name=PaymentHash,proto3" json:"PaymentHash,omitempty"`
	//how many times the luckPk can be received. every receive-item save as LuckItem.
	Parts          uint64       `protobuf:"varint,7,opt,name=parts,proto3" json:"parts,omitempty"`
	Gives          uint64       `protobuf:"varint,12,opt,name=gives,proto3" json:"gives,omitempty"`
	Status         LuckPKStatus `protobuf:"varint,8,opt,name=status,proto3,enum=toolrpc.LuckPKStatus" json:"status,omitempty"`
	ExpiredTimeSec int64        `protobuf:"varint,9,opt,name=expired_time_sec,json=expiredTimeSec,proto3" json:"expired_time_sec,omitempty"`
	//gen by server
	Invoice        string `protobuf:"bytes,10,opt,name=invoice,proto3" json:"invoice,omitempty"`
	CreatedAt      int64  `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ErrorCreateMsg string `protobuf:"bytes,14,opt,name=ErrorCreateMsg,proto3" json:"ErrorCreateMsg,omitempty"`
}

func (x *LuckPk) Reset() {
	*x = LuckPk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_luckPk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckPk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckPk) ProtoMessage() {}

func (x *LuckPk) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_luckPk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckPk.ProtoReflect.Descriptor instead.
func (*LuckPk) Descriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{1}
}

func (x *LuckPk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LuckPk) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LuckPk) GetUserAlias() string {
	if x != nil {
		return x.UserAlias
	}
	return ""
}

func (x *LuckPk) GetAssetId() uint64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *LuckPk) GetAmt() uint64 {
	if x != nil {
		return x.Amt
	}
	return 0
}

func (x *LuckPk) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *LuckPk) GetPaymentHash() string {
	if x != nil {
		return x.PaymentHash
	}
	return ""
}

func (x *LuckPk) GetParts() uint64 {
	if x != nil {
		return x.Parts
	}
	return 0
}

func (x *LuckPk) GetGives() uint64 {
	if x != nil {
		return x.Gives
	}
	return 0
}

func (x *LuckPk) GetStatus() LuckPKStatus {
	if x != nil {
		return x.Status
	}
	return LuckPKStatus_INIT
}

func (x *LuckPk) GetExpiredTimeSec() int64 {
	if x != nil {
		return x.ExpiredTimeSec
	}
	return 0
}

func (x *LuckPk) GetInvoice() string {
	if x != nil {
		return x.Invoice
	}
	return ""
}

func (x *LuckPk) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LuckPk) GetErrorCreateMsg() string {
	if x != nil {
		return x.ErrorCreateMsg
	}
	return ""
}

//luckPackage will split to many LuckItem
type LuckItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LuckpkId  int64  `protobuf:"varint,2,opt,name=luckpk_id,json=luckpkId,proto3" json:"luckpk_id,omitempty"`
	UserId    int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserAlias string `protobuf:"bytes,4,opt,name=user_alias,json=userAlias,proto3" json:"user_alias,omitempty"`
	Amt       int64  `protobuf:"varint,5,opt,name=amt,proto3" json:"amt,omitempty"`
	CreatedAt int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *LuckItem) Reset() {
	*x = LuckItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_luckPk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckItem) ProtoMessage() {}

func (x *LuckItem) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_luckPk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckItem.ProtoReflect.Descriptor instead.
func (*LuckItem) Descriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{2}
}

func (x *LuckItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LuckItem) GetLuckpkId() int64 {
	if x != nil {
		return x.LuckpkId
	}
	return 0
}

func (x *LuckItem) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LuckItem) GetUserAlias() string {
	if x != nil {
		return x.UserAlias
	}
	return ""
}

func (x *LuckItem) GetAmt() int64 {
	if x != nil {
		return x.Amt
	}
	return 0
}

func (x *LuckItem) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type CreateLuckPkRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//luckpk id
	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Invoice string `protobuf:"bytes,2,opt,name=invoice,proto3" json:"invoice,omitempty"`
}

func (x *CreateLuckPkRes) Reset() {
	*x = CreateLuckPkRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_luckPk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLuckPkRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLuckPkRes) ProtoMessage() {}

func (x *CreateLuckPkRes) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_luckPk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLuckPkRes.ProtoReflect.Descriptor instead.
func (*CreateLuckPkRes) Descriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{3}
}

func (x *CreateLuckPkRes) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateLuckPkRes) GetInvoice() string {
	if x != nil {
		return x.Invoice
	}
	return ""
}

//message GetLuckItemReq{
//  //luckpk id
//  int64  id=1;
//  string user_node_key=2;
//  string user_alias=3;
//}
type GiveLuckPkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Luckpk id
	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Invoice string `protobuf:"bytes,2,opt,name=invoice,proto3" json:"invoice,omitempty"`
}

func (x *GiveLuckPkReq) Reset() {
	*x = GiveLuckPkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_luckPk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiveLuckPkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiveLuckPkReq) ProtoMessage() {}

func (x *GiveLuckPkReq) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_luckPk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiveLuckPkReq.ProtoReflect.Descriptor instead.
func (*GiveLuckPkReq) Descriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{4}
}

func (x *GiveLuckPkReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GiveLuckPkReq) GetInvoice() string {
	if x != nil {
		return x.Invoice
	}
	return ""
}

type LuckpkIdObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//luckpk id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LuckpkIdObj) Reset() {
	*x = LuckpkIdObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_luckPk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuckpkIdObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckpkIdObj) ProtoMessage() {}

func (x *LuckpkIdObj) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_luckPk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckpkIdObj.ProtoReflect.Descriptor instead.
func (*LuckpkIdObj) Descriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{5}
}

func (x *LuckpkIdObj) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListLuckItemRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64       `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Items []*LuckItem `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (x *ListLuckItemRes) Reset() {
	*x = ListLuckItemRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_luckPk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLuckItemRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLuckItemRes) ProtoMessage() {}

func (x *ListLuckItemRes) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_luckPk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLuckItemRes.ProtoReflect.Descriptor instead.
func (*ListLuckItemRes) Descriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{6}
}

func (x *ListLuckItemRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListLuckItemRes) GetItems() []*LuckItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListLuckPkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNodeKey string `protobuf:"bytes,1,opt,name=user_node_key,json=userNodeKey,proto3" json:"user_node_key,omitempty"`
}

func (x *ListLuckPkReq) Reset() {
	*x = ListLuckPkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_luckPk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLuckPkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLuckPkReq) ProtoMessage() {}

func (x *ListLuckPkReq) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_luckPk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLuckPkReq.ProtoReflect.Descriptor instead.
func (*ListLuckPkReq) Descriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{7}
}

func (x *ListLuckPkReq) GetUserNodeKey() string {
	if x != nil {
		return x.UserNodeKey
	}
	return ""
}

type ListLuckPkRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64     `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Items []*LuckPk `protobuf:"bytes,2,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (x *ListLuckPkRes) Reset() {
	*x = ListLuckPkRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_luckPk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLuckPkRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLuckPkRes) ProtoMessage() {}

func (x *ListLuckPkRes) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_luckPk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLuckPkRes.ProtoReflect.Descriptor instead.
func (*ListLuckPkRes) Descriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{8}
}

func (x *ListLuckPkRes) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListLuckPkRes) GetItems() []*LuckPk {
	if x != nil {
		return x.Items
	}
	return nil
}

type RegistTlsKeyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserNodeKey []byte `protobuf:"bytes,1,opt,name=user_node_key,json=userNodeKey,proto3" json:"user_node_key,omitempty"`
	Sig         []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	Alias       string `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *RegistTlsKeyReq) Reset() {
	*x = RegistTlsKeyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_toolrpc_luckPk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistTlsKeyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistTlsKeyReq) ProtoMessage() {}

func (x *RegistTlsKeyReq) ProtoReflect() protoreflect.Message {
	mi := &file_toolrpc_luckPk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistTlsKeyReq.ProtoReflect.Descriptor instead.
func (*RegistTlsKeyReq) Descriptor() ([]byte, []int) {
	return file_toolrpc_luckPk_proto_rawDescGZIP(), []int{9}
}

func (x *RegistTlsKeyReq) GetUserNodeKey() []byte {
	if x != nil {
		return x.UserNodeKey
	}
	return nil
}

func (x *RegistTlsKeyReq) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

func (x *RegistTlsKeyReq) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

var File_toolrpc_luckPk_proto protoreflect.FileDescriptor

var file_toolrpc_luckPk_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x75, 0x63, 0x6b, 0x50, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x02, 0x0a, 0x04, 0x73,
	0x70, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x5f,
	0x70, 0x61, 0x79, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x50, 0x61, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x72, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0x9f, 0x03, 0x0a, 0x06, 0x4c, 0x75, 0x63, 0x6b, 0x50, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x6d, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61,
	0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x69, 0x76, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x67, 0x69, 0x76, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x6f,
	0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x50, 0x4b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x73, 0x67, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x4c, 0x75, 0x63, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x75, 0x63, 0x6b, 0x70, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x75, 0x63, 0x6b, 0x70, 0x6b, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6d, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x61, 0x6d, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x75, 0x63, 0x6b, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x0d, 0x47, 0x69, 0x76, 0x65, 0x4c, 0x75, 0x63, 0x6b,
	0x50, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x1d, 0x0a, 0x0b, 0x4c, 0x75, 0x63, 0x6b, 0x70, 0x6b, 0x49, 0x64, 0x4f, 0x62, 0x6a, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x33, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x50, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x4c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x75, 0x63,
	0x6b, 0x50, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x6f,
	0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x50, 0x6b, 0x52, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x5d, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x54, 0x6c, 0x73,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x2a, 0x4c, 0x0a, 0x0c, 0x4c, 0x75, 0x63, 0x6b, 0x50, 0x4b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x6e, 0x64,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x04,
	0x2a, 0x3f, 0x0a, 0x0a, 0x53, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x61, 0x79, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x79, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61,
	0x79, 0x45, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0x03, 0x32, 0xee, 0x03, 0x0a, 0x09, 0x6c, 0x75, 0x63, 0x6b, 0x50, 0x6b, 0x41, 0x70, 0x69, 0x12,
	0x2c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61, 0x79, 0x12, 0x0d, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x70, 0x61, 0x79, 0x1a, 0x0d, 0x2e, 0x74,
	0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x70, 0x61, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x42,
	0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x54, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x54,
	0x6c, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x75, 0x63, 0x6b,
	0x50, 0x6b, 0x12, 0x0f, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x75, 0x63,
	0x6b, 0x50, 0x6b, 0x1a, 0x0f, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x75,
	0x63, 0x6b, 0x50, 0x6b, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x75, 0x63,
	0x6b, 0x50, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70,
	0x63, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x70, 0x6b, 0x49, 0x64, 0x4f, 0x62, 0x6a, 0x1a, 0x0f, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x50, 0x6b, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x0a, 0x47, 0x69, 0x76, 0x65, 0x4c, 0x75, 0x63, 0x6b, 0x50, 0x6b, 0x12, 0x16,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x4c, 0x75, 0x63,
	0x6b, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x14, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x75, 0x63, 0x6b, 0x70,
	0x6b, 0x49, 0x64, 0x4f, 0x62, 0x6a, 0x1a, 0x18, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x50, 0x6b,
	0x12, 0x16, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x75, 0x63, 0x6b, 0x50, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x75, 0x63, 0x6b, 0x50, 0x6b, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x42, 0x15, 0x5a, 0x13, 0x6f, 0x6d, 0x2d, 0x72, 0x70, 0x63, 0x2d, 0x74, 0x6f, 0x6f,
	0x6c, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_toolrpc_luckPk_proto_rawDescOnce sync.Once
	file_toolrpc_luckPk_proto_rawDescData = file_toolrpc_luckPk_proto_rawDesc
)

func file_toolrpc_luckPk_proto_rawDescGZIP() []byte {
	file_toolrpc_luckPk_proto_rawDescOnce.Do(func() {
		file_toolrpc_luckPk_proto_rawDescData = protoimpl.X.CompressGZIP(file_toolrpc_luckPk_proto_rawDescData)
	})
	return file_toolrpc_luckPk_proto_rawDescData
}

var file_toolrpc_luckPk_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_toolrpc_luckPk_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_toolrpc_luckPk_proto_goTypes = []interface{}{
	(LuckPKStatus)(0),       // 0: toolrpc.LuckPKStatus
	(SpayStatus)(0),         // 1: toolrpc.SpayStatus
	(*Spay)(nil),            // 2: toolrpc.spay
	(*LuckPk)(nil),          // 3: toolrpc.LuckPk
	(*LuckItem)(nil),        // 4: toolrpc.LuckItem
	(*CreateLuckPkRes)(nil), // 5: toolrpc.CreateLuckPkRes
	(*GiveLuckPkReq)(nil),   // 6: toolrpc.GiveLuckPkReq
	(*LuckpkIdObj)(nil),     // 7: toolrpc.LuckpkIdObj
	(*ListLuckItemRes)(nil), // 8: toolrpc.ListLuckItemRes
	(*ListLuckPkReq)(nil),   // 9: toolrpc.ListLuckPkReq
	(*ListLuckPkRes)(nil),   // 10: toolrpc.ListLuckPkRes
	(*RegistTlsKeyReq)(nil), // 11: toolrpc.RegistTlsKeyReq
	(*emptypb.Empty)(nil),   // 12: google.protobuf.Empty
}
var file_toolrpc_luckPk_proto_depIdxs = []int32{
	1,  // 0: toolrpc.spay.status:type_name -> toolrpc.SpayStatus
	0,  // 1: toolrpc.LuckPk.status:type_name -> toolrpc.LuckPKStatus
	4,  // 2: toolrpc.ListLuckItemRes.Items:type_name -> toolrpc.LuckItem
	3,  // 3: toolrpc.ListLuckPkRes.Items:type_name -> toolrpc.LuckPk
	2,  // 4: toolrpc.luckPkApi.CreateSpay:input_type -> toolrpc.spay
	12, // 5: toolrpc.luckPkApi.HeartBeat:input_type -> google.protobuf.Empty
	11, // 6: toolrpc.luckPkApi.RegistTlsKey:input_type -> toolrpc.RegistTlsKeyReq
	3,  // 7: toolrpc.luckPkApi.CreateLuckPk:input_type -> toolrpc.LuckPk
	7,  // 8: toolrpc.luckPkApi.GetLuckPkInfo:input_type -> toolrpc.LuckpkIdObj
	6,  // 9: toolrpc.luckPkApi.GiveLuckPk:input_type -> toolrpc.GiveLuckPkReq
	7,  // 10: toolrpc.luckPkApi.ListLuckItem:input_type -> toolrpc.LuckpkIdObj
	9,  // 11: toolrpc.luckPkApi.ListLuckPk:input_type -> toolrpc.ListLuckPkReq
	2,  // 12: toolrpc.luckPkApi.CreateSpay:output_type -> toolrpc.spay
	12, // 13: toolrpc.luckPkApi.HeartBeat:output_type -> google.protobuf.Empty
	12, // 14: toolrpc.luckPkApi.RegistTlsKey:output_type -> google.protobuf.Empty
	3,  // 15: toolrpc.luckPkApi.CreateLuckPk:output_type -> toolrpc.LuckPk
	3,  // 16: toolrpc.luckPkApi.GetLuckPkInfo:output_type -> toolrpc.LuckPk
	12, // 17: toolrpc.luckPkApi.GiveLuckPk:output_type -> google.protobuf.Empty
	8,  // 18: toolrpc.luckPkApi.ListLuckItem:output_type -> toolrpc.ListLuckItemRes
	10, // 19: toolrpc.luckPkApi.ListLuckPk:output_type -> toolrpc.ListLuckPkRes
	12, // [12:20] is the sub-list for method output_type
	4,  // [4:12] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_toolrpc_luckPk_proto_init() }
func file_toolrpc_luckPk_proto_init() {
	if File_toolrpc_luckPk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_toolrpc_luckPk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_luckPk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckPk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_luckPk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_luckPk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLuckPkRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_luckPk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiveLuckPkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_luckPk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuckpkIdObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_luckPk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLuckItemRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_luckPk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLuckPkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_luckPk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLuckPkRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_toolrpc_luckPk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistTlsKeyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_toolrpc_luckPk_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_toolrpc_luckPk_proto_goTypes,
		DependencyIndexes: file_toolrpc_luckPk_proto_depIdxs,
		EnumInfos:         file_toolrpc_luckPk_proto_enumTypes,
		MessageInfos:      file_toolrpc_luckPk_proto_msgTypes,
	}.Build()
	File_toolrpc_luckPk_proto = out.File
	file_toolrpc_luckPk_proto_rawDesc = nil
	file_toolrpc_luckPk_proto_goTypes = nil
	file_toolrpc_luckPk_proto_depIdxs = nil
}
